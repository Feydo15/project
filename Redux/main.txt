                                                 Redux

 CORE CONCEPTS IN REDUX


State

State is the current information behind a web application.

For a calendar application it includes the events (name, date, label, etc.), the current timezone,
and the display filters. For a todo app it includes the todo items (description, completed/not completed),
the current order of the items, and display filters. For a word editor, it includes the contents of the document,
the print settings, and comments.

With Redux, state can be any JavaScript type, including: number, string, boolean, array, and object.

Here’s an example state for a todo app:

<const state = [ 'Print trail map', 'Pack snacks', 'Summit the mountain' ];>

Each piece of information in this state—an array in this case—would inform some part of the user interface.


******************************************Actions******************************************

Most well-designed applications will have separate components that need to communicate and share data with each other.

A todo list might have an input field where the user can type in a new todo item.
The application might transfer this data from the input field, add it to an array of all todo's, 
and then render them as text on the screen. This entire interaction can be defined as an action. 
In Redux, actions are represented as plain JS objects.

Here’s what that action might look like:

const action = {
  type: 'todo's/addTodo',
  payload: 'Take selfies'
};
Every action must have a type property with a string value. This describes the action.

Typically, an action has a payload property with an object value.

This includes any information related to the action. In this case, 
the payload is the todo text.

When an action is generated and notifies other parts of the application, 
we say that the action is dispatched.

Here are two more example actions:

“Remove all todo's”. This requires no payload because no additional information is needed:

const action = {
  type: 'todo's/removeAll'
}
“Remove the ‘Pack snacks’ todo”:

const action = {
  type: 'todo's/removeTodo',
  payload: 'Pack snacks'
}



*******************************************Reducers**********************************************

So far, we’ve defined the state of our application and the actions representing requests to change that state,
 but we haven’t seen how these changes are carried out in JavaScript. The answer is a reducer.

A reducer, or reducer function, 
is a plain JavaScript function that defines how the current state and an action are used in combination to create the new state.

Here’s an example of a reducer function for a todo app:

const initialState = [ 'Print trail map', 'Pack snacks', 'Summit the mountain' ];
 
const todoReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'todos/addTodo': {
      return [ ...state, action.payload];
    }
    case 'todos/removeAll': {
      return [];
    }
    default: {
      return state;
    }
  }
}
There a few things about this reducer that are true for all reducers:

It’s a plain JavaScript function
It defines the application’s next state given a current state and a specific action
It returns a default initial state if no action is provided
It returns the current state if the action is not recognized
There are two intermediate JavaScript syntaxes used here:

We use the equals sign = to supply a default value for the state parameter.
We use the spread operator (...) to copy the current state and any changed values into a new object, 
not the existing state argument. We’ll explain why in the next exercise.


***********************************************Rules of Reducers***********************************

In the previous exercise, we wrote reducers that returned a new copy of the state rather than editing it directly. 
We did this to adhere to the rules of reducers provided by the Redux documentation:

They should only calculate the new state value based on the state and action arguments.
They are not allowed to modify the existing state. Instead, they must copy the existing state and make changes to the copied values.
They must not do any asynchronous logic or have other “side effects”.
By asynchronous logic or “side effects”, we mean anything that the function does aside from returning a value, 
e.g. logging to the console, saving a file, setting a timer, making an HTTP request, generating random numbers.

These rules make Redux code predictable and easy to debug: tests run reliably and other developers know what to expect from your code.


*************************************Immutable Updates and Pure Functions*****************************


In programming, there is a more general way to describe the three rules of reducers in Redux: reducers must make immutable updates and be pure functions.

If a function makes immutable updates to its arguments, it does not change the argument but instead makes a copy and changes that copy. 
(Sounds similar to rule 2, no?) It’s called updating immutably because the function doesn’t change, or mutate, the arguments.

This function mutates its argument:

const mutableUpdater = (obj) => {
  obj.completed = !obj.completed;
  return obj;
}
 
const task = { text: 'do dishes', completed: false };
const updatedTask = mutableUpdater(task);
console.log(updatedTask); 
// Prints { text: 'do dishes', completed: true };
 
console.log(task); 
// Prints { text: 'do dishes', completed: true };
Meanwhile, this function “immutably updates” its argument:

const immutableUpdater = (obj) => {
  return {
    ...obj,
    completed: !obj.completed
  }
}
 
const task = { text: 'iron clothes', completed: false };
const updatedTask = immutableUpdater(task);
console.log(updatedTask); 
// Prints { text: 'iron clothes', completed: true };
 
console.log(task); 
// Prints { text: 'iron clothes', completed: false };
By copying the contents of the argument obj into a new object ({...obj}) and updating the completed property of the copy, 
the argument obj will remain unchanged.

Note that, plain strings, numbers, and booleans are immutable in JavaScript so we can just return them without making a copy:

const immutator = (num) => num + 1;
const x = 5;
const updatedX = immutator(x);
 
console.log(x, updatedX); // Prints 5, 6
If a function is pure, then it will always have the same outputs given the same inputs.

This is a combination of rules 1 and 3:

Reducers should only calculate the new state value based on the state and action arguments.
Reducers must not do any asynchronous logic or other “side effects”.
In this example, 
the function is not a pure function because its returned value depends on the status of a remote endpoint.

const addItemToList = (list) => {
  let item;
  fetch('https://anything.com/endpoint')
    .then(response => {
      if (!response.ok) {
        item = {};
      }
 
      item = response.json();
   });
 
   return [...list, item];  
};
The function can be made pure by pulling the fetch() statement outside of the function.

let item;
  fetch('https://anything.com/endpoint')
    .then(response => {
      if (!response.ok) {
        item = {};
      }
 
      item = response.json();
   });
 
const addItemToList = (list, item) => {
    return [...list, item];
};


*************************************Create a Redux Store******************************************

As you know, 
every Redux application uses a reducer function that describes which actions can update the state 
and how those actions lead to the next state.

For example, suppose you wanted to build an application for a light switch. 
Its reducer might look like this:

const initialState = 'on';
const lightSwitchReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'toggle':
      return state === 'on' ? 'off' : 'on';
    default:
      return state;
  }
}
This reducer handles a single action type 'toggle' and returns the next state of the store: 
'on' if it had been 'off' and vice-versa. If an unrecognized action is received, 
the current state of the store is returned.

The programmer could manually execute the reducer with the current state of the store 
and the desired action to perform like so:

let state = 'on';
state = lightSwitchReducer(state, { type: 'toggle' });
console.log(state); // Prints 'off'
However, this is the main responsibility of the store. 
The store is an object that enforces the one-way data flow model that Redux is built upon. 
It holds the current state inside, receives action dispatches, 
executes the reducer to get the next state, 
and provides access to the current state for the UI to re-render.

Redux exports a valuable helper function for creating this store object called createStore(). 
The createStore() helper function has a single argument, a reducer function.

To create a store with lightSwitchReducer, you could write:

import { createStore } from 'redux'
 
const initialState = 'on';
const lightSwitchReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'toggle':
      return state === 'on' ? 'off' : 'on';
    default:
      return state;
  }
}
 
const store = createStore(lightSwitchReducer);
For the remainder of this lesson, you will be building a simple counter application, 
whose state is a single number, using the Redux library.

In the code editor, you will find the initialState value as well as countReducer, 
which describes how the state can be updated in response to an 'increment' action.

**********************************Dispatch Actions to the Store*************************************

The store object returned by createStore() provides a number of useful methods for interacting with 
its state as well as the reducer function it was created with.

The most commonly used method, store.dispatch(), can be used to dispatch an action to the store, 
indicating that you wish to update the state. Its only argument is an action object, 
which must have a type property describing the desired state change.

const action = { type: 'actionDescriptor' }; 
store.dispatch(action);
Each time store.dispatch() is called with an action object, 
the store’s reducer function will be executed with the same action object. 
Assuming that the action.type is recognized by the reducer, the state will be updated and returned.

Let’s see how this works in the lightswitch application from the last exercise:

import { createStore } from 'redux';
 
const initialState = 'on';
const lightSwitchReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'toggle':
      return state === 'on' ? 'off' : 'on';
    default:
      return state;
  }
}
 
const store = createStore(lightSwitchReducer);
 
console.log(store.getState()); // Prints 'on'
 
store.dispatch({ type: 'toggle' }); 
console.log(store.getState()); // Prints 'off'
 
store.dispatch({ type: 'toggle' });
console.log(store.getState()); // Prints 'on'
In this example, you can also see another store method, store.getState(), 
which returns the current value of the store’s state. 
Printing its value between each dispatched action allows us to see how the store’s state changes.

Internally, when the store executes its reducer, it uses store.getState() as the state argument. 
Though you won’t see it, you can imagine that, when an action is dispatched like this…

store.dispatch({ type: 'toggle'});
…the store calls the reducer like this:

lightSwitchReducer(store.getState(), { type: 'toggle' });

---
**************************************Action Creators*********************************************


As you saw in the last exercise, 
you are likely to dispatch actions of the same type multiple times or from multiple places. 
Typing out the entire action object can be tedious and creates opportunities to make an error.

For example, in the light switch application, 
whose reducer accepts 'toggle' actions to turn the light 'on' or 'off', you might write:

store.dispatch({Type:'toggle'});
store.dispatch({type:'toggel'});
store.dispatch({typo:'toggle'});
Did you spot the errors?

In most Redux applications, 
action creators are used to reduce this repetition and to provide consistency. 
An action creator is simply a function that returns an action object with a type property. 
They are typically called and passed directly to the
 store.dispatch() method resulting in fewer errors and an easier-to-read dispatch statement.

The above code could be rewritten using an action creator called toggle() like so:

const toggle = () => {
  return { type: "toggle" };
}
store.dispatch(toggle()); // Toggles the light to 'off'
store.dispatch(toggle()); // Toggles the light back to 'on'
store.dispatch(toggle()); // Toggles the light back to 'off'
Though not necessary in a Redux application, 
action creators save us the time needed to type out the entire action object, 
reduce the chances you make a typo, and improve the readability of our application.

Often, before the reducer of an application is even written, 
Redux programmers will write action creators as a way of planning out which actions will be 
available to dispatch to the store.

-----
*************************************Respond to State Changes***************************************

In a typical web application, 
user interactions that trigger DOM events ("click", "keydown", etc…) 
can be listened for and responded to using an event listener.

Similarly, in Redux, actions dispatched to the store can be listened for and responded to using the 
store.subscribe() method. This method accepts one argument: a function, often called a listener, 
that is executed in response to changes to the store‘s state.

const reactToChange = () => console.log('change detected!');
store.subscribe(reactToChange);
In this example, each time an action is dispatched to the store, and a change to the state occurs, 
the subscribed listener, reactToChange(), will be executed.

Sometimes it is useful to stop the listener from responding to changes to the store, 
so store.subscribe() returns an unsubscribe function.

We can see this in action in the light switch application:

// lightSwitchReducer(), toggle(), and store omitted...
 
const reactToChange = () => {
  console.log(`The light was switched ${store.getState()}!`);
}
const unsubscribe = store.subscribe(reactToChange);
 
store.dispatch(toggle());
// reactToChange() is called, printing:
// 'The light was switched off!'
 
store.dispatch(toggle());
// reactToChange() is called, printing:
// 'The light was switched on!'
 
unsubscribe(); 
// reactToChange() is now unsubscribed
 
store.dispatch(toggle());
// no print statement!
 
console.log(store.getState()); // Prints 'off'
In this example, the listener function reactToChange() is subscribed to the store
Each time an action is dispatched, 
reactToChange() is called and prints the current value of the light switch. 
It is common for callbacks subscribed to the store to use store.getState() inside them.
After the first two dispatched actions, 
unsubscribe() is called causing reactToChange() to no longer be exectued in response to further dispatches made to store.
Note: It is not always required to use the unsubscribe() function returned by store.subscribe(), 
though it is useful to know that it exists.

Now, take a look at store.js in the code editor.
You will see that a few actions have been dispatched to the store of the counter application. 
Suppose you wanted to print the current value of store.getState() each time the state changes. 
While you could write something like this…

store.dispatch(decrement());
console.log(`The count is ${store.getState()}`);
store.dispatch(increment());
console.log(`The count is ${store.getState()}`);
store.dispatch(increment());
console.log(`The count is ${store.getState()}`);
…we know that this approach is repetitive. Instead, 
you can subscribe a change listener to print out the current state in response to state changes automatically.

____________________________

***************************************Connect the Redux Store to a UI*****************************************


Up until now, you have built a working counting application using Redux that lacks a proper user interface (UI). 
Let’s change that!

The UI for this application should display the current count number and allow the user to increment 
or decrement this value using the buttons provided. Take a look at the connected web browser window 
and you can see that the elements for such an interface are present, but they haven’t been connected to the Redux store yet.




Connecting a Redux store with any UI requires a few consistent steps, regardless of how the UI is implemented:

Create a Redux store
Render the initial state of the application.
Subscribe to updates. Inside the subscription callback:
Get the current store state
Select the data needed by this piece of UI
Update the UI with the data
Respond to UI events by dispatching Redux actions
These same steps are followed when building an interface using React, Angular, 
or jQuery. 
For now, we’ll create a very simple user interface for the counting application using the HTML DOM API.

Open up the index.html file and you can see the three HTML elements that are currently being rendered:

<p id='counter'>Waiting for current state.</p>
<button id='incrementer'>+</button>
<button id='decrementer'>-</button>
Now, open up store.js where you will find the pieces of Redux code that you have built throughout 
this lesson: the action creators increment() and decrement(), the reducer countReducer, 
and the store that ties it all together. Additionally, the following values have been added:

counterElement, incrementer, and decrementer: references to the HTML elements in index.html
render: A state-change listener for responding to changes to the store‘s state.
incrementerClicked and decrementerClicked: DOM event handlers for responding to the buttons being clicked by the user.
These new functions and elements will allow us to plug the Redux store into the UI. Let’s begin.

---------------------------------------------------------------------------------------------------
*********************************************React and Redux****************************************

As you saw in the last exercise, Redux can be used within the context of any UI framework, 
though it is most commonly paired with React. This makes sense considering that React 
and Redux were both developed by engineers at Facebook.

We can be more specific about the common steps involved in connecting Redux to a React UI:

A render() function will be subscribed to the store to re-render the top-level React Component.
The top-level React component will receive the current value of store.getState() as a prop and use 
that data to render the UI.
Event listeners attached to React components will dispatch actions to the store.
Take a look at store.js in the code editor. Here, 
you can see the completed light switch application following this pattern.

The render() function is subscribed to the store.
store.getState() is passed as a prop called state to the <LightSwitch /> component.
The LightSwitch component displays the current state of the store, either 'on' or 'off', 
and adjusts the background colors accordingly.
The LightSwitch component declares a click handler that dispatches a toggle() action to the store.
Note 1: The prop name state isn’t a special React name and can be customized as the programmer sees 
fit. For example, lightSwitchState={store.getState()} would also be valid.

Instructions
In the next exercise, you will implement the Counter app using a React UI. For now, 
take a moment and familiarize yourself with how the state of the store is used by this application’s
 React components.

Observe that the same steps from the last exercise for connecting Redux to a UI are followed:

Create a Redux store
Render the initial state of the application.
Subscribe to updates. Inside the subscription callback:
Get the current store state
Select the data needed by this piece of UI
Update the UI with the data
Respond to UI events by dispatching Redux actions

----------------------------------------------------------------------------------------------------
***************************************************Review*******************************************

Congratulations! 
You were able to apply the core concepts of the Redux framework by implementing an application using
the Redux library.

By completing this lesson, you are now able to:

Install the redux library into your project using npm install redux.
Import the createStore() helper function from the 'redux' library.
Create a store object that holds the entire state of your Redux application using createStore().
Get the current state of the store using store.getState().
Dispatch actions to the store using store.dispatch(action).
Create action creators to reduce the repetitive creation of action objects.
Register a change listener function to respond to changes to the store using store.subscribe(listener).
Recognize the pattern for connecting Redux to any user interface.
Implement a Redux application using either the HTML DOM API or React.
Throughout this lesson, you may have thought to yourself that Redux adds a lot of unnecessary 
complexity to these simple applications. We implemented Redux in a very basic way, which is useful 
for learning but not how it’s done in the real world.

Redux shines when it is used in applications with many features and a lot of data where having a 
centralized store to keep it all organized is advantageous. In the next lesson, you will learn how 
to build and organize Redux applications with complex state.