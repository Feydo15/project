                                                 Redux

 CORE CONCEPTS IN REDUX


State

State is the current information behind a web application.

For a calendar application it includes the events (name, date, label, etc.), the current timezone,
and the display filters. For a todo app it includes the todo items (description, completed/not completed),
the current order of the items, and display filters. For a word editor, it includes the contents of the document,
the print settings, and comments.

With Redux, state can be any JavaScript type, including: number, string, boolean, array, and object.

Here’s an example state for a todo app:

<const state = [ 'Print trail map', 'Pack snacks', 'Summit the mountain' ];>

Each piece of information in this state—an array in this case—would inform some part of the user interface.


******************************************Actions******************************************

Most well-designed applications will have separate components that need to communicate and share data with each other.

A todo list might have an input field where the user can type in a new todo item.
The application might transfer this data from the input field, add it to an array of all todo's, 
and then render them as text on the screen. This entire interaction can be defined as an action. 
In Redux, actions are represented as plain JS objects.

Here’s what that action might look like:

const action = {
  type: 'todo's/addTodo',
  payload: 'Take selfies'
};
Every action must have a type property with a string value. This describes the action.

Typically, an action has a payload property with an object value.

This includes any information related to the action. In this case, 
the payload is the todo text.

When an action is generated and notifies other parts of the application, 
we say that the action is dispatched.

Here are two more example actions:

“Remove all todo's”. This requires no payload because no additional information is needed:

const action = {
  type: 'todo's/removeAll'
}
“Remove the ‘Pack snacks’ todo”:

const action = {
  type: 'todo's/removeTodo',
  payload: 'Pack snacks'
}



*******************************************Reducers**********************************************

So far, we’ve defined the state of our application and the actions representing requests to change that state,
 but we haven’t seen how these changes are carried out in JavaScript. The answer is a reducer.

A reducer, or reducer function, 
is a plain JavaScript function that defines how the current state and an action are used in combination to create the new state.

Here’s an example of a reducer function for a todo app:

const initialState = [ 'Print trail map', 'Pack snacks', 'Summit the mountain' ];
 
const todoReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'todos/addTodo': {
      return [ ...state, action.payload];
    }
    case 'todos/removeAll': {
      return [];
    }
    default: {
      return state;
    }
  }
}
There a few things about this reducer that are true for all reducers:

It’s a plain JavaScript function
It defines the application’s next state given a current state and a specific action
It returns a default initial state if no action is provided
It returns the current state if the action is not recognized
There are two intermediate JavaScript syntaxes used here:

We use the equals sign = to supply a default value for the state parameter.
We use the spread operator (...) to copy the current state and any changed values into a new object, 
not the existing state argument. We’ll explain why in the next exercise.


***********************************************Rules of Reducers***********************************

In the previous exercise, we wrote reducers that returned a new copy of the state rather than editing it directly. 
We did this to adhere to the rules of reducers provided by the Redux documentation:

They should only calculate the new state value based on the state and action arguments.
They are not allowed to modify the existing state. Instead, they must copy the existing state and make changes to the copied values.
They must not do any asynchronous logic or have other “side effects”.
By asynchronous logic or “side effects”, we mean anything that the function does aside from returning a value, 
e.g. logging to the console, saving a file, setting a timer, making an HTTP request, generating random numbers.

These rules make Redux code predictable and easy to debug: tests run reliably and other developers know what to expect from your code.


*************************************Immutable Updates and Pure Functions*****************************


In programming, there is a more general way to describe the three rules of reducers in Redux: reducers must make immutable updates and be pure functions.

If a function makes immutable updates to its arguments, it does not change the argument but instead makes a copy and changes that copy. 
(Sounds similar to rule 2, no?) It’s called updating immutably because the function doesn’t change, or mutate, the arguments.

This function mutates its argument:

const mutableUpdater = (obj) => {
  obj.completed = !obj.completed;
  return obj;
}
 
const task = { text: 'do dishes', completed: false };
const updatedTask = mutableUpdater(task);
console.log(updatedTask); 
// Prints { text: 'do dishes', completed: true };
 
console.log(task); 
// Prints { text: 'do dishes', completed: true };
Meanwhile, this function “immutably updates” its argument:

const immutableUpdater = (obj) => {
  return {
    ...obj,
    completed: !obj.completed
  }
}
 
const task = { text: 'iron clothes', completed: false };
const updatedTask = immutableUpdater(task);
console.log(updatedTask); 
// Prints { text: 'iron clothes', completed: true };
 
console.log(task); 
// Prints { text: 'iron clothes', completed: false };
By copying the contents of the argument obj into a new object ({...obj}) and updating the completed property of the copy, 
the argument obj will remain unchanged.

Note that, plain strings, numbers, and booleans are immutable in JavaScript so we can just return them without making a copy:

const immutator = (num) => num + 1;
const x = 5;
const updatedX = immutator(x);
 
console.log(x, updatedX); // Prints 5, 6
If a function is pure, then it will always have the same outputs given the same inputs.

This is a combination of rules 1 and 3:

Reducers should only calculate the new state value based on the state and action arguments.
Reducers must not do any asynchronous logic or other “side effects”.
In this example, the function is not a pure function because its returned value depends on the status of a remote endpoint.

const addItemToList = (list) => {
  let item;
  fetch('https://anything.com/endpoint')
    .then(response => {
      if (!response.ok) {
        item = {};
      }
 
      item = response.json();
   });
 
   return [...list, item];  
};
The function can be made pure by pulling the fetch() statement outside of the function.

let item;
  fetch('https://anything.com/endpoint')
    .then(response => {
      if (!response.ok) {
        item = {};
      }
 
      item = response.json();
   });
 
const addItemToList = (list, item) => {
    return [...list, item];
};